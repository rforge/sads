\documentclass[11pt, A4]{article}
\usepackage[brazil]{babel}
\usepackage{graphicx}
\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage{url}
\usepackage{Sweave}
%\usepackage{natbib}
\setlength{\parindent}{0pt}
\setlength{\hoffset}{-0.5in}
\setlength{\textwidth}{6in}
\setlength{\voffset}{-0.1in}
%\pdfpagewidth=\paperwidth
%\pdfpageheight=\paperheight
\newcommand{\R}{{\sf R}}
\newcommand{\code}[1]{\texttt{#1}}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{document}

%\setkeys{Gin}{width=0.9\textwidth}
\title{Package sads: ToDo list}
\author{Paulo Inácio Prado}
\maketitle

\section{Bugs and Issues}
\label{sec:bugs-issues}
\begin{itemize}
\item Check warnings \code{Created a package name, '[date]', when none found} returned when detaching the package:
    @ 
<<eval=F>>=
detach("package:sads", unload=T)
@ %def 
Reported as a (unsolved?) bug at \url{https://bugs.r-project.org/bugzilla/show_bug.cgi?id=15481}.
Similar beahvior when the developer version is loaded with \code{load_all} of devtools package. 
Many warning messages like that
\begin{verbatim}
1: In FUN(X[[2L]], ...) :
  Created a package name, ‘2014-03-06 20:04:12’, when none found
\end{verbatim}

\item Conferir funcao trueLL e seu uso na fitsad, pois pelo menos para dados de mariposas de Fisher
  resulta em melhoria do modelo lognormal truncado, mas os gráficos de diagnóstico não mostram isso.
  Se usamos ajuste à lognormal com \code{trueLL=FALSE} a logserie empata com lognormal e pln, o que faz sentido,
  pois ela está errando em apenas um dos valores de abundância (o maior), 
  enquanto os outros dois modelos acertam nesse mas erram em vários outros. Veja qqplots.
  @ 
<<TrueLL>>=
## TRUE likelihood 
##(Lindsey, J.K. 1999. Some stattistical heresies. _The Statistician 48(1): 1-40).
moths.ls <- fitsad(moths, "ls")
moths.pln <- fitsad(moths, "poilog")
moths.ln1 <- fitsad(moths, "lnorm", trunc=0.5)
moths.ln2 <- fitsad(moths, "lnorm", trunc=0.5, trueLL=F)
AICctab(moths.ls, moths.pln, moths.ln1, moths.ln2,
        nobs=length(moths), base=T, weights=T)
## Verificando: graficos parecem nao sustentar 
## o melhor desempenho do lognormal em relacao aa pln com trueLL
plot(moths.oc)
lines(octavpred(moths.pln))
lines(octavpred(moths.ln1), col="red")
## Veja tambem qqplots
@ %def 
\item \code{fitzipf} slow:
@ 
<<zipf-slow, eval=FALSE>>=
z1 <- rpois(100, lambda=dzipf(1:100, s=0.2, N=100)*10000)
z1 <- z1[z1>0]
z1.fit <- fitzipf(z1) #slow. Why?
@ %def 

\item Check why predicted line for rad in Zipf model does not fit the end of the empirical rad:
@ 
<<zipf_misfit>>=
## gera dados de uma zipf
z1 <- rpois(100, lambda=dzipf(1:100, s=0.2, N=100)*10000)
z1 <- z1[z1>0]
z1.fit <- fitzipf(z1) #slow. Why?
z1.r1 <- radpred(z1.fit)
plot(rad(z1))
lines(z1.r1)
@ %def 

\item Quantile functions of rad models (\code{qbss}, \code{qgs}, \code{qmand} and \code{qzipf})  extremely slow.
  \begin{itemize}
  \item \textbf{DONE} Try a method based on step functions rather than the current search algorithm.
  \item Compare the results of both methods (maybe include both in the function?).
  \end{itemize}
\item ensure that all methods for data frames work with classes \code{octav} and \code{rad}.
  Some do not seem to work, e.g.:
@ 
<<dataframe_methods_octav>>=
data(moths)
teste <- octav(moths)
teste2 <- octav(moths, preston=TRUE)
cbind(teste,teste2)
@ %def 

\item functions \code{rad} and \code{octav} should handle zero and negative numbers (exception or exclusion, as in arg log=''xy'' of \code{plot}.
\item Check why installing the package with \code{install.packages} or loading 
  developer version with \code{load_all} these messages are issued:
\begin{verbatim}
Note: in method for ‘octavpred’ with signature
‘object="fitsad",sad="missing",rad="missing",coef="missing",trunc="missing",oct="ANY",S="missing",N="missing"’:
expanding the signature to include omitted arguments in definition: =
"missing"
Note: in method for ‘octavpred’ with signature
‘object="fitrad",sad="missing",rad="missing",coef="missing",trunc="missing",oct="ANY",S="missing",N="missing"’:
expanding the signature to include omitted arguments in definition: =
"missing"
\end{verbatim}

\end{itemize}

\subsection{Solved}
\label{sec:solved}
\begin{itemize}
\item Check why
@ 
<<eval=F>>=
p.123 <-ppareto(1:3,shape=3,scale=1) 
sum(qpareto(p.123, 3, scale=1)-1:3)
@ %def 
gives a small difference. 
\paragraph{SOLVED:} difference because \code{ppareto(1,shape=3,scale=1)} is zero 
\item Check why
  @ 
<<eval=TRUE>>=
pzipf(10,N=100,s=2) - sum(dzipf(1:10,N=100,s=2))
@ %def 
gives a small difference. Once solved include this command in help page. 
\paragraph{SOLVED:} Half the default numerical tolerance of \Sexpr{.Machine$double.eps ^ 0.5} The correct test is
<<eval=TRUE>>=
all.equal(pzipf(10,N=100,s=2), sum(dzipf(1:10,N=100,s=2)))
@ %def 
\item Check why \code{summary} for \code{fitsad} objects returned by \code{fitvolkov} results in a \code{summary} with a huge \code{call}. Probably due the use of \code{do.call} to call \code{mle2}.
@ 
<<summary-volkov>>=
mag5 <- c(103,115,13,2,67,36,51,8,6,61,10,21,
          7,65,4,49,92,37,16,6,23,9,2,6,5,4,
          1,3,1,9,2)
mg5.v <- fitvolkov(mag5, skip.hessian=TRUE)
summary(mg5.v)
@ %def 
\paragraph{SOLVED:} just quote the names of the function called by \code{do.call}, function code: 
\code{result <- do.call("mle2", c(list(minuslogl=LL, start = list(theta = thetahat, m = mhat), data = list(x = x)), dots))  }
\item Check incorrect calculations of \code{radpred} when data object is provided in argument \code{object}:
@
<<eval=F>>=
data(moths)
moths.ls <- fitsad(moths, "ls")
moths.rad.pred <- radpred(moths.ls)
moths.rad.pred2 <- radpred(object=moths, sad="ls", 
                             coef=as.list(coef(moths.ls)), distr="D")
moths.rad.pred3 <- radpred(sad="ls", coef=as.list(coef(moths.ls)), distr="D", S=length(moths), N=sum(moths))
plot(moths.rad.pred, type="l")
lines(moths.rad.pred2, col="blue")
lines(moths.rad.pred3, col="red")
@
\paragraph{SOLVED:} values match now. Nor sure about the bug before. This is not the problem, but 
method for object=numeric changed to include a warning is argument 'distr' is missing.
\end{itemize}

\section{Distributions}
\label{sec:distributions}
\begin{itemize}
  \item Distributions to include:
  \begin{itemize}
  \item Continuous power
  \item Truncated power (or Power-bend)
  \item \textbf{DONE} Geometric series
  \item \textbf{DONE} Broken-stick 
  \item Poisson-gamma (maybe, since it is negative binomial)
  \item Poisson-exponencial
  \end{itemize}
\item Allow Pareto distribution to return zero values when scale >= min(x). (Maybe not a good idea: may cause fitting problems.). 
\item Make invalid parameters return \code{NaN}, instead than stoping. (done in some functions, check in all)
\item Finish functions for distribution and fitting fo Poisson-gamma and Poisson-exponential. 
  Currently only density functions (old code, check) available.
\end{itemize}


\section{Fitting}
\label{sec:fiting-functions}
\begin{itemize}
\item Evaluate if Mouillot \& Lepretre's \cite{mouillot2000} method for fitting Zipf-Mandelbrot is useful to find starting values for \code{fitmand};
\item Evaluate if Wilson's \cite{wilson2009} methods for fitting rads can/should be included;
\item Include geometric series and He \& Tang's method \cite{he2008} fitting method;
\item Check if fitting problems for Pareto distribution can occur (see pareto help page in VGAM: \url{http://finzi.psych.upenn.edu/R/library/VGAM/html/pareto1.html} and also references in McGuill's chapter on sads in \cite{magurran2011}.
\item Check if parameters J for mszm and volkov and N for ls can be declared as fixed in their fitting functions. 
  This will also allow to eliminate a bunch of \code{if}'s in \code{radpred} and \code{octavpred}.
\item Use \code{do.call} to call \code{mle2} inside fitting functions to get the explicit arguments in the call slot
  and thus in the summary. This is done in \code{fitvolkov}, compare to \emph{e.g.} \code{fitls}:
  @ 
<<summary-volkov>>=
mag5 <- c(103,115,13,2,67,36,51,8,6,61,10,21,
          7,65,4,49,92,37,16,6,23,9,2,6,5,4,
          1,3,1,9,2)
fitsad(mag5, "volkov",skip.hessian=TRUE)
fitsad(mag5, "ls") ## Call without explicit arguments
@ 
\end{itemize}

\section{Diagnostic}
\label{sec:graphical-functions}
\begin{itemize}
\item \textbf{DONE} Include (...) arguments in function \code{qqsad}.
\item Check if all functions for diagnostic plots have the (...) argument.
\item For \code{qqsad} consider to use the function qqline to draw the line 
  (seems to allow any probability distribution thorugh argiment \code{probs}).
  If not posible, at least add argument \code{probs} to control the line slope.
\item For \code{radpred} and \code(octavpred) methods for rad models, consider to use the pdf function of the rad model,
  instead of the slower generic solution that uses the quantile function.
\item For \code{radpred} methods for \code{fitrad} class, 
  check if the distribution type (D=discrete or C=continuous) is necessary, as used for  \code{fitsad} classes.
\item \textbf{DONE} Include Preston's method for distribution of boundary values among octaves in \code{octav}
\item nclude Preston's method for distribution of boundary values among octaves in \code{octavpred}

\item Rewrite \code{octav} and \code{octavpred} to use \code{hist} instead of \code{cut}, 
  see example of dzsm and help page of cut: 
  ``Instead of ‘table(cut(x, br))’, ‘hist(x, br, plot = FALSE)’ is
  more efficient and less memory hungry.''. 
  Also, more handy to choose midpoints and different cutting methods (e.g. rigth=TRUE or FALSE in cut)
\item for \code{radplot} and \code{octavplot} methods for \code{fitsads} and \code{fitrad}
  include predicted line of the fitted model.
\end{itemize}

\section{Other functions}
\label{sec:other-functions}
\begin{itemize}
\item Include Connoly's et al. \cite{connoly2009} bootstrap method in \code{rsad}
\item Create a \code{rrad} function analogous to \code{rsad} for generating samples from rad distributions
\item Include functions for sars, starting with those proposed by Coleman \cite{coleman1981} and Kobayashi \cite{kobayashi1980}.
\end{itemize}

\section{Help pages}
\label{sec:help-pages}
\begin{itemize}
\item Include links to the functions cited in the \code{seealso} section
\item Use markups for codes, url, pkg, etc
\item For quantile functions that use search algorithm or approxfun include this information in the note section of help page.
\item Add Paulo's email in all help pages
\item Add keywords 
\item add email
\item  Todo do man pages:
  \begin{itemize}
  \item \code{ppsad},\code{qqsad}, \code{pprad},\code{qqrad}
  \item \code{radfit}
  \item classes and methods
  \item generic functions \code{octavepred} and \code{radpred} and their methods
  \item \code{fitsad} (finish, e.g. include bronke stick)
  \end{itemize}
\end{itemize}

\section{Vignette}
\label{sec:vignette}
\begin{itemize}
\item  Incluir todas as funções relevantes
\item Tabela com todas as sads implementadas
\end{itemize}

\bibliographystyle{plain}
\bibliography{vignetes}
\end{document}
